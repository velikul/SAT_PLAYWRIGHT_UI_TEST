import { splitLongString } from './string';
describe('splitLongString', () => {
    test('no print width', () => {
        expect(splitLongString('abc abc abc', 0)).toEqual(['abc abc abc']);
    });
    test('should return the text if it is not too long', () => {
        expect(splitLongString('short text', 100)).toEqual(['short text']);
    });
    test('no space', () => {
        expect(splitLongString('abcdef', 3)).toEqual(['abcdef']);
    });
    test('exact values', () => {
        expect(splitLongString('a', 1)).toEqual(['a']);
        expect(splitLongString('a a', 1)).toEqual(['a', 'a']);
        expect(splitLongString('a a a', 1)).toEqual(['a', 'a', 'a']);
    });
    test.each([
        ['abc abc', 2, ['abc', 'abc']],
        ['abc a abc', 2, ['abc', 'a', 'abc']],
        ['ab abc ab abc a c', 3, ['ab', 'abc', 'ab', 'abc', 'a c']],
        ['ab a c ab a c a c', 3, ['ab', 'a c', 'ab', 'a c', 'a c']],
        ['a a a', 2, ['a', 'a', 'a']],
        ['a a a', 1, ['a', 'a', 'a']],
        ['ab ab ab', 1, ['ab', 'ab', 'ab']],
    ])('overflow values', (text, splitWidth, expected) => {
        expect(splitLongString(text, splitWidth)).toEqual(expected);
    });
    test('should split if the text is too long', () => {
        expect(splitLongString('a very long text with multiple words', 8)).toEqual([
            'a very',
            'long',
            'text',
            'with',
            'multiple',
            'words',
        ]);
        expect(splitLongString('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vestibulum eu urna ac placerat. Nulla vehicula id mi vitae tristique. Donec imperdiet tincidunt tellus, ac imperdiet metus venenatis sed. Cras quis est tempor justo luctus rutrum.', 20)).toEqual([
            'Lorem ipsum dolor',
            'sit amet,',
            'consectetur',
            'adipiscing elit.',
            'Mauris vestibulum eu',
            'urna ac placerat.',
            'Nulla vehicula id mi',
            'vitae tristique.',
            'Donec imperdiet',
            'tincidunt tellus, ac',
            'imperdiet metus',
            'venenatis sed. Cras',
            'quis est tempor',
            'justo luctus rutrum.',
        ]);
    });
    test.only('real cases', () => {
        expect(splitLongString('Feature: A very long feature name', 20)).toEqual([
            'Feature: A very long',
            'feature name',
        ]);
    });
});
